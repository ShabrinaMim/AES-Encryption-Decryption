import time
from BitVector import *
time_afterKeyExpansion = 0.1111
time_afterEncryptionTime = 0.1111
time_afterDecryptionTime = 0.1111 

SBox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

INV_SBox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]

RCon = [[0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]]


def encryptionFunction(inputBytes, inputKey):
    time_beforeEncryptionTime = time.time()
    stateArray = [[] for x in range(4)]
    for i in range(0,4):
        for j in range(0,4):
            stateArray[i].append(inputBytes[i + 4 * j])

    keyValues = keyExpansionFunction(inputKey)
    stateArray = addRroundKeyFunction(stateArray, keyValues, 0)
    for x in range(1, 10):
        stateArray = subBytesFunction(stateArray, False)
        stateArray = shiftRowsFunction(stateArray, False)
        stateArray = mixColumnsFunction(stateArray, False)
        stateArray = addRroundKeyFunction(stateArray, keyValues, x)

    stateArray = subBytesFunction(stateArray, False)
    stateArray = shiftRowsFunction(stateArray ,False)
    stateArray = addRroundKeyFunction(stateArray, keyValues, (x + 1))

    result = [None for x in range(16)]
    for i in range(4):
        for j in range(4):
            result[i + (4*j)] = stateArray[i][j]
    global time_afterEncryptionTime
    time_afterEncryptionTime = time.time() - time_beforeEncryptionTime
    return result


def decryptionFunction(inputBytes, inputKey):
    time_beforeDecryptionTime = time.time()
    stateArray = [[] for x in range(4)]
    for i in range(4):
        for j in range(4):
            stateArray[i].append(inputBytes[i + (4*j)])

    keyValues = keyExpansionFunction(inputKey)
    stateArray = addRroundKeyFunction(stateArray, keyValues, 10)

    roundNumber = 9
    while (roundNumber>=1):
        stateArray = shiftRowsFunction(stateArray, True)
        stateArray = subBytesFunction(stateArray, True)
        stateArray = addRroundKeyFunction(stateArray, keyValues, roundNumber)
        roundNumber = roundNumber - 1
        stateArray = mixColumnsFunction(stateArray, True)
        
    stateArray = shiftRowsFunction(stateArray, True)
    stateArray = subBytesFunction(stateArray, True)
    stateArray = addRroundKeyFunction(stateArray, keyValues, roundNumber)

    result = [None for x in range(16)]
    for i in range(4):
        for j in range(4):
            result[i + (4*j)] = stateArray[i][j]
    global time_afterDecryptionTime
    time_afterDecryptionTime = time.time() - time_beforeDecryptionTime
    return result

def keyExpansionFunction(inputKey):
    time_beforeKeyExpansion = time.time()
    inputKey = [ord(val) for val in inputKey]
    x = len(inputKey)
    if x < 16:
        for i in range(0,16 - x):
            inputKey.append(0x01)

    keyValues = [[] for x in range(4)]
    for i in range(0,4):
        for j in range(0,4):
            keyValues[i].append(inputKey[i + (4*j)])

    for columnNumber in range(4,44): 
        if (columnNumber % 4) != 0:
            for rowNumber in range(0,4):
                value = keyValues[rowNumber][columnNumber - 1] ^ keyValues[rowNumber][columnNumber - 4]
                keyValues[rowNumber].append(value)
        if (columnNumber % 4) == 0:
            valArray = [keyValues[rowNumber][columnNumber - 1] for rowNumber in range(1, 4)]
            valArray.append(keyValues[0][columnNumber - 1])
            x = len(valArray)
            for i in range(0,x):
                rowSBox = valArray[i] // 0x10
                columnSBox = valArray[i] % 0x10
                valArray[i] = SBox[(16*rowSBox) + columnSBox]
            for rowNumber in range(0,4):
                value = (RCon[rowNumber][int((columnNumber / 4) - 1)]) ^ (keyValues[rowNumber][columnNumber - 4]) ^ (valArray[rowNumber])
                keyValues[rowNumber].append(value)
    global time_afterKeyExpansion
    time_afterKeyExpansion = time.time() - time_beforeKeyExpansion
    return keyValues

def addRroundKeyFunction(arrayState, keyValues, roundNumber):
    for columnNo in range(0,4):
        arrayState[0][columnNo] = arrayState[0][columnNo] ^ keyValues[0][4 * roundNumber + columnNo]
        arrayState[1][columnNo] = arrayState[1][columnNo] ^ keyValues[1][4 * roundNumber + columnNo]
        arrayState[2][columnNo] = arrayState[2][columnNo] ^ keyValues[2][4 * roundNumber + columnNo]
        arrayState[3][columnNo] = arrayState[3][columnNo] ^ keyValues[3][4 * roundNumber + columnNo]
    return arrayState

def shiftRowsFunction(arrayState, boolValue):
    value = 1
    if boolValue == True:
        for i in range(1, 4):
            arrayState[i] = rightShiftFunction(arrayState[i], value)
            value  = value + 1
    if boolValue == False:
        for i in range(1, 4):
            arrayState[i] = leftShiftFunction(arrayState[i], value)
            value  = value + 1
    return arrayState

def leftShiftFunction(arrayState, value):
    x = arrayState[:]
    for i in range(0,value):
        newx = x[1:]
        newx.append(x[0])
        x[:] = newx[:]
    return x


def rightShiftFunction(arrayState, value):
    x = arrayState[:]
    for i in range(0,value):
        newx = x[:-1]
        newx.insert(0,x[-1])
        x[:] = newx[:]
    return x

def subBytesFunction(arrayState, boolValue):
    if boolValue == True: 
        boxValue = INV_SBox
    if boolValue == False:
        boxValue = SBox
    x = len(arrayState)
    for i in range(0,x):
        for j in range(0,4):
            rowNumber = arrayState[i][j] // 0x10
            columnNumber = arrayState[i][j] % 0x10
            arrayState[i][j] = boxValue[(16*rowNumber) + columnNumber]
    return arrayState



def mixColumnsFunction(arrayState, boolValue):
    
    for i in range(0,4):
        if boolValue == True:
            val1 = mul(arrayState[0][i],0x0e) ^ mul(arrayState[1][i],0x0b) ^ mul(arrayState[2][i],0x0d) ^ mul(arrayState[3][i],0x09)
            val2 = mul(arrayState[0][i],0x09) ^ mul(arrayState[1][i],0x0e) ^ mul(arrayState[2][i],0x0b) ^ mul(arrayState[3][i],0x0d)
            val3 = mul(arrayState[0][i],0x0d) ^ mul(arrayState[1][i],0x09) ^ mul(arrayState[2][i],0x0e) ^ mul(arrayState[3][i],0x0b)
            val4 = mul(arrayState[0][i],0x0b) ^ mul(arrayState[1][i],0x0d) ^ mul(arrayState[2][i],0x09) ^ mul(arrayState[3][i],0x0e)
        if boolValue == False:
            val1 = mul(arrayState[0][i],0x02) ^ mul(arrayState[1][i],0x03) ^ arrayState[2][i] ^ arrayState[3][i]
            val2 = arrayState[0][i] ^ mul(arrayState[1][i],0x02) ^ mul(arrayState[2][i],0x03) ^ arrayState[3][i]
            val3 = arrayState[0][i] ^ arrayState[1][i] ^ mul(arrayState[2][i],0x02) ^ mul(arrayState[3][i],0x03)
            val4 = mul(arrayState[0][i],0x03) ^ arrayState[1][i] ^ arrayState[2][i] ^ mul(arrayState[3][i],0x02)  
        arrayState[0][i] = val1
        arrayState[1][i] = val2
        arrayState[2][i] = val3
        arrayState[3][i] = val4
    return arrayState

AES_modulus = BitVector(bitstring='100011011')

def mul(p, q):
	vp = BitVector(intVal = p, size = 8)
	vq = BitVector(intVal = q, size = 8)
	vr = vp.gf_multiply_modular(vq, AES_modulus, 8)
	return vr.intValue()
